#+title: Roc Mode
#+subtitle: Roc programming language mode for Emacs

Roc is a strongly typed functional programming language inspired by Elm, but for variety of platforms. See https://www.roc-lang.org/.


* Disclaimer

This code is an early work in progress and I am a novice at Emacs Lisp. Polite suggestions and contributions are welcome.

* Install

Currently only installation from the Git repository is possible.

Requirements: Emacs 29.1+ with the [[https://github.com/radian-software/straight.el][Straight]] package manager.

** In Doom Emacs

Add the following to ~packages.el~ (use ~doom/find-file-in-private-config~ typically bound to ~SPC f p~):

#+begin_src emacs-lisp :noeval
(package! roc-mode :recipe (:host gitlab :repo "tad-lispy/roc-mode"))
#+end_src

See also [[https://gitlab.com/tad-lispy/nixos-configuration/-/tree/main/doom-emacs/modules/lang/roc][my private module for Roc]] that uses this package.

** Using straight

#+begin_src emacs-lisp
(straight-use-package '(roc-mode :type git :host gitlab :repo "tad-lispy/roc-mode"))
#+end_src

** TODO vanilla Emacs

Once the package is published to MELPA, it should be possible to install it with built-in ~install-package~, and ~straight~ shouldn't be a requirement any longer.

* Features

** STRT Syntax highlighting

Partially done.

After installing the package you need to install the Tree Sitter grammar. Run ~treesit-install-language-grammar~ and select ~roc~. This should give you syntax highlighting.

Question: Should this be automated?

Relevant discussion: https://lists.gnu.org/archive/html/emacs-devel/2023-11/msg01365.html

** TODO Indentation rules

Can tree sitter be utilized here?

** TODO Language server integration

I have it working in my Emacs Doom config, but it has doom specific code there (modules). Shall I port it here?

Also, Emacs 29 comes with an LSP client called Eglot built in. But I'm using lsp-mode installed from straight.


* License

GPLv3

